


	enum {
		FIELD_CPUFREQ,
		FIELD_CPUTIME,
		FIELD_CPUUTIL,
		FIELD_RSS,
		FIELD_VMSIZE,
		FIELD_PAGES,
		FIELD_READ,
		FIELD_WRITE,
        FIELD_GPU_COMPUTE,
        FIELD_GPU_MEMORY,
        FIELD_GPU_POWER,
		FIELD_CNT
	};

	acct_gather_profile_dataset_t dataset[] = {
		{ "CPUFrequency", PROFILE_FIELD_UINT64 },
		{ "CPUTime", PROFILE_FIELD_DOUBLE },
		{ "CPUUtilization", PROFILE_FIELD_DOUBLE },
		{ "RSS", PROFILE_FIELD_UINT64 },
		{ "VMSize", PROFILE_FIELD_UINT64 },
		{ "Pages", PROFILE_FIELD_UINT64 },
		{ "ReadMB", PROFILE_FIELD_DOUBLE },
		{ "WriteMB", PROFILE_FIELD_DOUBLE },
        { "GPUCompute", PROFILE_FIELD_DOUBLE },
        { "GPUMem", PROFILE_FIELD_DOUBLE },
        { "GPUPower", PROFILE_FIELD_DOUBLE },
		{ NULL, PROFILE_FIELD_NOT_SET }
	};



jobacct_gather_cgroup = 


jag_common_poll_data(
	List task_list, bool pgid_plugin, uint64_t cont_id,
	jag_callbacks_t *callbacks, bool profile) {


    if (profile){
        static void _record_profile(struct jobacctinfo *jobacct){
            acct_gather_profile_g_create_group("Tasks");

            acct_gather_profile_g_create_dataset(ds_name, profile_gid, dataset);

            acct_gather_profile_g_add_sample_data(jobacct->dataset_id, (void *)data, jobacct->cur_time);
        }
    }
}

typedef struct {
	uint32_t taskid; /* contains which task number it was on */
	uint32_t nodeid; /* contains which node number it was on */
	stepd_step_rec_t *job; /* contains stepd job pointer */
} jobacct_id_t;


//
stepd_step_rec_t *job https://github.com/SchedMD/slurm/blob/2cefac420ad369416caaef65255cd5705936370e/src/slurmd/slurmstepd/slurmstepd_job.h#L125
    * job_gres_list



job = jobacct_id->job;
uid = job->uid;         // user ID



typedef struct jag_prec {	/* process record */
	bool	visited;
	int	act_cpufreq;	/* actual average cpu frequency */
	int	last_cpu;	/* last cpu */
	pid_t	pid;
	pid_t	ppid;
	double  ssec; /* system cpu time: To normalize divide by system hertz */
	/* Units of tres_[in|out] should be raw numbers (bytes/joules) */
	int     tres_count; /* count of tres in the tres_data */
	acct_gather_data_t *tres_data; /* array of tres data */
	double  usec; /* user cpu time: To normalize divide by system hertz */
} jag_prec_t;


typedef struct acct_gather_data {
	uint64_t	num_reads;  /* count of reads */
	uint64_t	num_writes; /* count of writes */
	uint64_t	size_read;  /* raw amount read (in) */
	uint64_t	size_write; /* raw amount written (out) */
} acct_gather_data_t;




        /*
         * Build a string indicating a node's used GRES
         * IN gres_list - generated by gres_plugin_node_config_validate()
         * RET - string, must be xfreed by caller
         */
        extern char *gres_get_node_used(List gres_list);
        
        /*
         * Fill in an array of GRES type ids contained within the given job gres_list
         *		and an array of corresponding counts of those GRES types.
         * IN gres_list - a List of GRES types allocated to a job.
         * IN arr_len - Length of the arrays (the number of elements in the gres_list).
         * IN gres_count_ids, gres_count_vals - the GRES type ID's and values found
         *	 	in the gres_list.
         * RET SLURM_SUCCESS or error code
         */
        extern int gres_plugin_job_count(List gres_list, int arr_len,
                                         uint32_t *gres_count_ids,
                                         uint64_t *gres_count_vals);
        
        /*
         * Build a string identifying total GRES counts of each type
         * IN gres_list - a List of GRES types allocated to a job.
         * RET string containing comma-separated list of gres type:model:count
         *     must release memory using xfree()
         */
        extern char *gres_plugin_job_alloc_count(List gres_list);
        

https://github.com/SchedMD/slurm/blob/ac1182cfffa2f66988fa3c71ed2dc12cb27581b0/src/common/gres.h#L172




https://github.com/SchedMD/slurm/blob/27c9742d33262f188669a3419ce1bc6b36d7ff97/src/plugins/task/cgroup/task_cgroup_devices.c

extern List gres_plugin_get_allocated_devices(List gres_list, bool is_job);

device_list = gres_plugin_get_allocated_devices(job_gres_list, true);

gres_device_t *gres_device;

device_list = gres_plugin_get_allocated_devices(step_gres_list, false);
















